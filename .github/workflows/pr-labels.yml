name: PR Labels

on:
  pull_request_target:
    branches:
      - main
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - name: Label PR based on title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const labels = [];
            if (title.includes('breaking') || title.includes('!')) labels.push('major');
            else if (title.startsWith('feat:') || title.startsWith('feat(')) labels.push('minor');
            else if (title.startsWith('fix:') || title.startsWith('fix(') || title.startsWith('chore:') || title.startsWith('docs:')) labels.push('patch');
            if (title.startsWith('feat')) labels.push('enhancement');
            if (title.startsWith('fix')) labels.push('bug');
            if (title.startsWith('docs')) labels.push('documentation');
            if (title.startsWith('chore')) labels.push('maintenance');
            if (labels.length === 0) return;
            const { data: repoLabels } = await github.rest.issues.listLabelsForRepo({ owner: context.repo.owner, repo: context.repo.repo, per_page: 100 });
            const existing = new Set(repoLabels.map(l => l.name));
            const colors = { major: 'e11d48', minor: 'fbca04', patch: '0e8a16', enhancement: '84b6eb', bug: 'd73a4a', documentation: '0075ca', maintenance: 'd876e3' };
            for (const name of labels) {
              if (!existing.has(name)) {
                await github.rest.issues.createLabel({ owner: context.repo.owner, repo: context.repo.repo, name, color: colors[name] || 'ededed', description: `Auto-generated label for ${name}` });
              }
            }
            await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.payload.pull_request.number, labels });

